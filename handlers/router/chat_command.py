from aiogram.filters import CommandStart, Command, CommandObject
from aiogram import Router
from aiogram import types
from aiogram.utils.formatting import Text
from aiogram import types
from sqlalchemy import select

from db import SessionLocal
from models import Invite, User
from filters import AdminFilter, WhitelistFilter


router = Router()


@router.message(Command("invite"), AdminFilter())
async def invite_username(message, command: CommandObject):
    args = command.args
    if not args:
        await message.reply(
            "–ù–µ—Ç—É –∏–º—è üôÉ\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ: @username", parse_mode=None
        )
        return

    if "@" in args:
        args = args.replace("@", "")

    args = args.strip()
    if len(args.split(" ")) > 1:
        await message.reply(
            "–ù–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è üôÉ\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ: @username", parse_mode=None
        )
        return
    with SessionLocal() as session:
        invite = (
            session.execute(select(Invite).where(Invite.username == args))
            .scalars()
            .first()
        )
        if invite:
            await message.reply(f"–ü–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å @{args} —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω", parse_mode=None)
            return

        invite = Invite(username=args)
        session.add(invite)
        session.commit()

    await message.reply(f"–ü–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å @{args} –ø—Ä–∏–≥–ª–∞—à–µ–Ω", parse_mode=None)
    
@router.message(Command("set"), WhitelistFilter())
async def set_default(message, command: CommandObject):
    args = command.args
    if not args:
        await message.reply(
            "–¢—É—Ç –Ω–µ—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –º–µ–Ω—è ü´†\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å */set <–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è>*\n\n–ü—Ä–∏–º–µ—Ä\n*/set –†–∞–∑–≥–∞–≤–∞—Ä–∏–≤–∞–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –∏ –≥–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ*", parse_mode="Markdown"
        )
        return

    args = args.strip()
    if len(args) < 3:
        await message.reply(
            "–¢—ã —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ —Ç–≤–æ—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –º–µ–Ω—à–µ —á–µ–º 3 —Å–∏–º–≤–æ–ª–∞‚ùî‚ùî‚ùî\n–ù—É –æ–∫–µ–π", parse_mode=None
        )
    with SessionLocal() as session:
        user = (
            session.execute(select(User).where(User.id == message.from_user.id))
            .scalars()
            .first()
        )

        user.default_request = args
        session.commit()

    await message.reply(f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\n{args} ", parse_mode=None)
    
@router.message(Command("unset"), WhitelistFilter())
async def set_default(message, command: CommandObject):
    args = command.args
    if  args:
        await message.reply(
            "–°—Ç—Ä–∞–Ω–Ω–æ —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫ –∫–æ–º–∞–Ω–¥–µ ü´†", parse_mode="Markdown"
        )
    with SessionLocal() as session:
        user = (
            session.execute(select(User).where(User.id == message.from_user.id))
            .scalars()
            .first()
        )

        user.default_request = None
        session.commit()

    await message.reply(f"–¢–µ–ø–µ—Ä—å —è –Ω–µ –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ‚òπÔ∏è", parse_mode=None)


@router.message(CommandStart())
async def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mistral.ai.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –≤ inline-—Ä–µ–∂–∏–º–µ ‚Äî –≤–≤–µ–¥–∏—Ç–µ @<–º–æ–π_–Ω–∏–∫> –≤ –ª—é–±–æ–º —á–∞—Ç–µ.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    content = Text(text) 
    
    await message.reply(**content.as_kwargs())


@router.message(Command("help"))
async def help(message: types.Message):
    text = (
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mistral.ai.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –≤ inline-—Ä–µ–∂–∏–º–µ ‚Äî –≤–≤–µ–¥–∏—Ç–µ @<–º–æ–π_–Ω–∏–∫> –≤ –ª—é–±–æ–º —á–∞—Ç–µ.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/set ‚Äî —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–æ–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏–π\n"
        "/unset ‚Äî —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
    )
    content = Text(text) 
    
    await message.reply(**content.as_kwargs())

    
