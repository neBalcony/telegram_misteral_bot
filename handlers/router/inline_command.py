from aiogram import Bot, Router, types
from aiogram.types import (
    InlineQueryResultArticle, InputTextMessageContent,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from filters import WhitelistFilter
from filters import AdminFilter
from filters import InlineCommand
router = Router()

@router.inline_query(InlineCommand(commands=["/start", "/help"]))
async def inline_command_handler(query: types.InlineQuery, command: str, args: str):
    await query.answer(
        results=[
            InlineQueryResultArticle(
                id="_",
                title="–ö–æ–º–∞–Ω–¥–∞: {command}, –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {args}",
                input_message_content=InputTextMessageContent(
                    message_text="–¢—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚òπÔ∏è"
                ),
                description=f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –¥–µ–ª–∞–µ—Ç –Ω–∏—á–µ–≥–æ",
            )
        ],
    )


@router.inline_query(InlineCommand(commands=["/invite"]),AdminFilter())
async def inline_command_handler(query: types.InlineQuery, command: str, args: str):
    keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü—Ä–∏–Ω—è—Ç—å ‚úÖ",
                callback_data="invite_accept"
            ),
            InlineKeyboardButton(
                text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå",
                callback_data="invite_decline"
            )
        ]
    ]
    )    
    
    await query.answer(
        results=[InlineQueryResultArticle(
            id="_",
            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
            input_message_content=InputTextMessageContent(
                message_text="–í–∞–º –ø—Ä–∏—à–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
            ),
            reply_markup=keyboard
        )],
    )


@router.callback_query(lambda c: c.data == "invite_accept")
async def invite_accept_handler(callback: CallbackQuery, bot:Bot):
    inline_id = callback.inline_message_id
    if WhitelistFilter.is_user_in_whitelist(callback.from_user.id):
        await bot.edit_message_text(
            inline_message_id=inline_id,
            text=f"–í—ã —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ ‚úÖ",
            parse_mode=None
        )
        return

    WhitelistFilter.add_user(callback.from_user.id)
    await bot.edit_message_text(
        inline_message_id=inline_id,
        text=f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ",
        parse_mode=None
    )

@router.callback_query(lambda c: c.data == "invite_decline")
async def invite_decline_handler(callback: CallbackQuery, bot:Bot):
    inline_id = callback.inline_message_id
    if WhitelistFilter.is_user_in_whitelist(callback.from_user.id):
        await bot.edit_message_text(
            inline_message_id=inline_id,
            text=f"–ù–æ –≤—ã —É–∂–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ üôÉ",
            parse_mode=None
        )
        return

    WhitelistFilter.add_user(callback.from_user.id)
    await bot.edit_message_text(
        inline_message_id=inline_id,
        text=f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå",
        parse_mode=None
    )